package contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.3.
 */
@SuppressWarnings("rawtypes")
public class Vote extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50604051611b29380380611b2983398181016040528101906100329190610263565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600190816100819190610505565b5081600290816100919190610505565b50603c8161009f9190610606565b426100aa9190610648565b60038190555050505061067c565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61011f826100d6565b810181811067ffffffffffffffff8211171561013e5761013d6100e7565b5b80604052505050565b60006101516100b8565b905061015d8282610116565b919050565b600067ffffffffffffffff82111561017d5761017c6100e7565b5b610186826100d6565b9050602081019050919050565b60005b838110156101b1578082015181840152602081019050610196565b60008484015250505050565b60006101d06101cb84610162565b610147565b9050828152602081018484840111156101ec576101eb6100d1565b5b6101f7848285610193565b509392505050565b600082601f830112610214576102136100cc565b5b81516102248482602086016101bd565b91505092915050565b6000819050919050565b6102408161022d565b811461024b57600080fd5b50565b60008151905061025d81610237565b92915050565b60008060006060848603121561027c5761027b6100c2565b5b600084015167ffffffffffffffff81111561029a576102996100c7565b5b6102a6868287016101ff565b935050602084015167ffffffffffffffff8111156102c7576102c66100c7565b5b6102d3868287016101ff565b92505060406102e48682870161024e565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061034057607f821691505b602082108103610353576103526102f9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103bb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261037e565b6103c5868361037e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006104026103fd6103f88461022d565b6103dd565b61022d565b9050919050565b6000819050919050565b61041c836103e7565b61043061042882610409565b84845461038b565b825550505050565b600090565b610445610438565b610450818484610413565b505050565b5b818110156104745761046960008261043d565b600181019050610456565b5050565b601f8211156104b95761048a81610359565b6104938461036e565b810160208510156104a2578190505b6104b66104ae8561036e565b830182610455565b50505b505050565b600082821c905092915050565b60006104dc600019846008026104be565b1980831691505092915050565b60006104f583836104cb565b9150826002028217905092915050565b61050e826102ee565b67ffffffffffffffff811115610527576105266100e7565b5b6105318254610328565b61053c828285610478565b600060209050601f83116001811461056f576000841561055d578287015190505b61056785826104e9565b8655506105cf565b601f19841661057d86610359565b60005b828110156105a557848901518255600182019150602085019450602081019050610580565b868310156105c257848901516105be601f8916826104cb565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106118261022d565b915061061c8361022d565b925082820261062a8161022d565b91508282048414831517610641576106406105d7565b5b5092915050565b60006106538261022d565b915061065e8361022d565b9250828201905080821115610676576106756105d7565b5b92915050565b61149e8061068b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063462e91ec11610066578063462e91ec1461015c5780634a79d50c146101785780637284e416146101965780638e7ea5b2146101b4578063f851a440146101d25761009e565b80630121b93f146100a357806306a49fce146100bf57806309eef43e146100dd57806329dcb0cf1461010d5780633477ee2e1461012b575b600080fd5b6100bd60048036038101906100b89190610974565b6101f0565b005b6100c76103a0565b6040516100d49190610b3f565b60405180910390f35b6100f760048036038101906100f29190610bbf565b61049b565b6040516101049190610c07565b60405180910390f35b6101156104bb565b6040516101229190610c31565b60405180910390f35b61014560048036038101906101409190610974565b6104c1565b604051610153929190610c96565b60405180910390f35b61017660048036038101906101719190610dfb565b61057d565b005b610180610671565b60405161018d9190610e44565b60405180910390f35b61019e6106ff565b6040516101ab9190610e44565b60405180910390f35b6101bc61078d565b6040516101c99190610e44565b60405180910390f35b6101da610906565b6040516101e79190610e75565b60405180910390f35b6003544210610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b90610edc565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b890610f48565b60405180910390fd5b6004805490508110610308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ff90610fda565b60405180910390fd5b60016004828154811061031e5761031d610ffa565b5b9060005260206000209060020201600101600082825461033e9190611058565b925050819055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60606004805480602002602001604051908101604052809291908181526020016000905b8282101561049257838290600052602060002090600202016040518060400160405290816000820180546103f7906110bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610423906110bb565b80156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b50505050508152602001600182015481525050815260200190600101906103c4565b50505050905090565b60056020528060005260406000206000915054906101000a900460ff1681565b60035481565b600481815481106104d157600080fd5b90600052602060002090600202016000915090508060000180546104f4906110bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610520906110bb565b801561056d5780601f106105425761010080835404028352916020019161056d565b820191906000526020600020905b81548152906001019060200180831161055057829003601f168201915b5050505050908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106029061115e565b60405180910390fd5b60046040518060400160405280838152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610661919061132a565b5060208201518160010155505050565b6001805461067e906110bb565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa906110bb565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b6002805461070c906110bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610738906110bb565b80156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b505050505081565b60606003544210156107d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cb90611448565b60405180910390fd5b60008080600090505b6004805490508110156108505782600482815481106107ff576107fe610ffa565b5b9060005260206000209060020201600101541115610843576004818154811061082b5761082a610ffa565b5b90600052602060002090600202016001015492508091505b80806001019150506107dd565b506004818154811061086557610864610ffa565b5b90600052602060002090600202016000018054610881906110bb565b80601f01602080910402602001604051908101604052809291908181526020018280546108ad906110bb565b80156108fa5780601f106108cf576101008083540402835291602001916108fa565b820191906000526020600020905b8154815290600101906020018083116108dd57829003601f168201915b50505050509250505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109518161093e565b811461095c57600080fd5b50565b60008135905061096e81610948565b92915050565b60006020828403121561098a57610989610934565b5b60006109988482850161095f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a075780820151818401526020810190506109ec565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a2f826109cd565b610a3981856109d8565b9350610a498185602086016109e9565b610a5281610a13565b840191505092915050565b610a668161093e565b82525050565b60006040830160008301518482036000860152610a898282610a24565b9150506020830151610a9e6020860182610a5d565b508091505092915050565b6000610ab58383610a6c565b905092915050565b6000602082019050919050565b6000610ad5826109a1565b610adf81856109ac565b935083602082028501610af1856109bd565b8060005b85811015610b2d5784840389528151610b0e8582610aa9565b9450610b1983610abd565b925060208a01995050600181019050610af5565b50829750879550505050505092915050565b60006020820190508181036000830152610b598184610aca565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8c82610b61565b9050919050565b610b9c81610b81565b8114610ba757600080fd5b50565b600081359050610bb981610b93565b92915050565b600060208284031215610bd557610bd4610934565b5b6000610be384828501610baa565b91505092915050565b60008115159050919050565b610c0181610bec565b82525050565b6000602082019050610c1c6000830184610bf8565b92915050565b610c2b8161093e565b82525050565b6000602082019050610c466000830184610c22565b92915050565b600082825260208201905092915050565b6000610c68826109cd565b610c728185610c4c565b9350610c828185602086016109e9565b610c8b81610a13565b840191505092915050565b60006040820190508181036000830152610cb08185610c5d565b9050610cbf6020830184610c22565b9392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0882610a13565b810181811067ffffffffffffffff82111715610d2757610d26610cd0565b5b80604052505050565b6000610d3a61092a565b9050610d468282610cff565b919050565b600067ffffffffffffffff821115610d6657610d65610cd0565b5b610d6f82610a13565b9050602081019050919050565b82818337600083830152505050565b6000610d9e610d9984610d4b565b610d30565b905082815260208101848484011115610dba57610db9610ccb565b5b610dc5848285610d7c565b509392505050565b600082601f830112610de257610de1610cc6565b5b8135610df2848260208601610d8b565b91505092915050565b600060208284031215610e1157610e10610934565b5b600082013567ffffffffffffffff811115610e2f57610e2e610939565b5b610e3b84828501610dcd565b91505092915050565b60006020820190508181036000830152610e5e8184610c5d565b905092915050565b610e6f81610b81565b82525050565b6000602082019050610e8a6000830184610e66565b92915050565b7fed88aced919ceab08020eca285eba38ceb9090ec8ab5eb8b88eb8ba42e000000600082015250565b6000610ec6601d83610c4c565b9150610ed182610e90565b602082019050919050565b60006020820190508181036000830152610ef581610eb9565b9050919050565b7fec9db4ebafb820ed88aced919ced9598ec85a8ec8ab5eb8b88eb8ba42e000000600082015250565b6000610f32601d83610c4c565b9150610f3d82610efc565b602082019050919050565b60006020820190508181036000830152610f6181610f25565b9050919050565b7fed9b84ebb3b4ec9d9820eca095ebb3b4eba5bc20ec958c20ec889820ec9786ec60008201527f8ab5eb8b88eb8ba42e0000000000000000000000000000000000000000000000602082015250565b6000610fc4602983610c4c565b9150610fcf82610f68565b604082019050919050565b60006020820190508181036000830152610ff381610fb7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110638261093e565b915061106e8361093e565b925082820190508082111561108657611085611029565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110d357607f821691505b6020821081036110e6576110e561108c565b5b50919050565b7fed9b84ebb3b4eb8a9420eab480eba6acec9e90eba78c20ecb694eab080eab08060008201527f20eab080eb8aa5ed95a9eb8b88eb8ba42e000000000000000000000000000000602082015250565b6000611148603183610c4c565b9150611153826110ec565b604082019050919050565b600060208201905081810360008301526111778161113b565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026111e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826111a3565b6111ea86836111a3565b95508019841693508086168417925050509392505050565b6000819050919050565b600061122761122261121d8461093e565b611202565b61093e565b9050919050565b6000819050919050565b6112418361120c565b61125561124d8261122e565b8484546111b0565b825550505050565b600090565b61126a61125d565b611275818484611238565b505050565b5b818110156112995761128e600082611262565b60018101905061127b565b5050565b601f8211156112de576112af8161117e565b6112b884611193565b810160208510156112c7578190505b6112db6112d385611193565b83018261127a565b50505b505050565b600082821c905092915050565b6000611301600019846008026112e3565b1980831691505092915050565b600061131a83836112f0565b9150826002028217905092915050565b611333826109cd565b67ffffffffffffffff81111561134c5761134b610cd0565b5b61135682546110bb565b61136182828561129d565b600060209050601f8311600181146113945760008415611382578287015190505b61138c858261130e565b8655506113f4565b601f1984166113a28661117e565b60005b828110156113ca578489015182556001820191506020850194506020810190506113a5565b868310156113e757848901516113e3601f8916826112f0565b8355505b6001600288020188555050505b505050505050565b7fed88aced919ceab08020eca784ed9689eca491ec9e85eb8b88eb8ba42e000000600082015250565b6000611432601d83610c4c565b915061143d826113fc565b602082019050919050565b6000602082019050818103600083015261146181611425565b905091905056fea264697066735822122001cf28e1b38545e63443d9424d05bcb85ab61c38e665b2834d33bf86413a98c364736f6c634300081c0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ADDCANDIDATE = "addCandidate";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_CANDIDATES = "candidates";

    public static final String FUNC_DEADLINE = "deadline";

    public static final String FUNC_DESCRIPTION = "description";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_GETWINNER = "getWinner";

    public static final String FUNC_HASVOTED = "hasVoted";

    public static final String FUNC_TITLE = "title";

    public static final String FUNC_VOTE = "vote";

    @Deprecated
    protected Vote(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Vote(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Vote(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Vote(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addCandidate(String _name) {
        final Function function = new Function(
                FUNC_ADDCANDIDATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> admin() {
        final Function function = new Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> candidates(BigInteger param0) {
        final Function function = new Function(FUNC_CANDIDATES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> deadline() {
        final Function function = new Function(FUNC_DEADLINE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> description() {
        final Function function = new Function(FUNC_DESCRIPTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getCandidates() {
        final Function function = new Function(FUNC_GETCANDIDATES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Candidate>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getWinner() {
        final Function function = new Function(FUNC_GETWINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> hasVoted(String param0) {
        final Function function = new Function(FUNC_HASVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> title() {
        final Function function = new Function(FUNC_TITLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger _candidateIndex) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_candidateIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Vote load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new Vote(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Vote load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Vote(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Vote load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new Vote(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Vote load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Vote(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Vote> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String _title, String _description,
            BigInteger _durationMinutes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_description), 
                new org.web3j.abi.datatypes.generated.Uint256(_durationMinutes)));
        return deployRemoteCall(Vote.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<Vote> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider, String _title, String _description,
            BigInteger _durationMinutes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_description), 
                new org.web3j.abi.datatypes.generated.Uint256(_durationMinutes)));
        return deployRemoteCall(Vote.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Vote> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
            BigInteger gasLimit, String _title, String _description, BigInteger _durationMinutes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_description), 
                new org.web3j.abi.datatypes.generated.Uint256(_durationMinutes)));
        return deployRemoteCall(Vote.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Vote> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit, String _title, String _description,
            BigInteger _durationMinutes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_description), 
                new org.web3j.abi.datatypes.generated.Uint256(_durationMinutes)));
        return deployRemoteCall(Vote.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Candidate extends DynamicStruct {
        public String name;

        public BigInteger voteCount;

        public Candidate(String name, BigInteger voteCount) {
            super(new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.generated.Uint256(voteCount));
            this.name = name;
            this.voteCount = voteCount;
        }

        public Candidate(Utf8String name, Uint256 voteCount) {
            super(name, voteCount);
            this.name = name.getValue();
            this.voteCount = voteCount.getValue();
        }
    }
}
